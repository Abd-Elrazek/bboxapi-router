apply plugin: 'java'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'com.google.code.gson:gson:2.8.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
    compile project(':bboxapi-router')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}

task callLog(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.CallLog"
    args ""
}

task deviceInfo(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.DeviceInfo"
    args ""
}

task dial(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.action.Dial"
    args ""
}

task display(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.action.Display"
    args ""
}

task reboot(type: JavaExec) {
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.action.Reboot"
    args ""
}

task hosts(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.Hosts"
    args ""
}

task logout(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.action.Logout"
    args ""
}

task summary(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.Summary"
    args ""
}

task voip(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.Voip"
    args ""
}

task wifi(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.action.Wifi"
    args ""
}

task wireless(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += sourceSets.main.resources
    main = "fr.bmartel.bboxapi.examples.request.Wireless"
    args ""
}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
