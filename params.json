{"name":"Bbox-api-client","tagline":"Java/Android client for using Bbox Json API","body":"# Bbox Api client library #\r\nhttp://akinaru.github.io/bbox-api-client\r\n\r\n<i>Last update on 29/09/2015</i>\r\n\r\nLibrary for using Bbox Json API opened in end of september 2015 on Bbox Sensation\r\n\r\nThese apis are used by Bbox management interface in hostname : gestionbbox.lan port 80\r\n\r\nYou must be on the same network as your Bbox to use them\r\n\r\nlast release : https://github.com/akinaru/bbox-api-client/releases/tag/1.02\r\n\r\nThis README may contain inaccurate information about these api due to early release.\r\n\r\n<h3>List of API implemented</h3>\r\n\r\n| api     | prototype        |   access      | comment\r\n|--------------|---------|-----|------------------------|\r\n| summary | ``getSummary(IApiSummaryListener listener)`` |  public    | some information about Bbox      |\r\n| authentication | ``authenticate(String password, IAuthenticationListener authenticationListener)`` |  public    | authenticate to be able to use private API      |\r\n| voip | ``voipData(IVoipDataListener voipDataListener)`` |  private    | request voip data      |\r\n| device information | ``bboxDevice(IBboxDeviceListener deviceListener)`` |  private    | request specific information about box      |\r\n| full call log | ``getFullCallLog(IFullCallLogListener listener)`` |  private    | get call log since last reboot      |\r\n| hosts | ``getHosts(IHostsListener listener)`` |  private    | request list of known hosts      |\r\n| set wifi state | ``setWifiState(boolean state, IRequestStatusListener requestStatus)`` |  private    | set Wifi ON/OFF      |\r\n| set led state | ``setBboxDisplayState(boolean state, IRequestStatusListener requestStatus)`` |  private    | set Bbox led display ON/OFF      |\r\n| dial | ``voipDial(int lineNumber, String phone, IRequestStatusListener requestStatus)`` |  private    | dial a phone number on a line      |\r\n\r\n<h3>How to use ?</h3>\r\n\r\nInstanciate BboxApi class\r\n\r\n```\r\nimport fr.bmartel.bboxapi.BboxApi;\r\n\r\n.....\r\n\r\nBboxApi apiWrapper = new BboxApi();\r\n```\r\n\r\n<h3>Retrieve summary info</h3>\r\n\r\nSummary information contains basic information about Bbox\r\n\r\nRequest summary information (no authentication required)\r\n\r\n```\r\napiWrapper.getSummary(new IApiSummaryListener() {\r\n\t\r\n\t@Override\r\n\tpublic void onApiSummaryReceived(ApiSummary summary) {\r\n\t\t\r\n\t\t//summary result received\r\n\t\t\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onApiSummaryFailure() {\r\n\t\t\r\n\t\t//summary request failure\r\n\t\t\r\n\t}\r\n});\r\n```\r\n\r\n``ApiSummary`` object description \r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``rxOccupation`` | int    | RX occupation (in %)      |\r\n|``txOccupation`` | int    | TX occupation (in %)      |\r\n|``hostList`` | List<Host>    | List of hosts (see host api)      |\r\n|``iptvAddr`` | String    | IPTV broadcast address      |\r\n|``iptvIpAddr`` | String    | IPTV receiver address      |\r\n|``iptvReceipt`` | int    | -      |\r\n|``iptvNumber`` | int    | -     |\r\n|``voipStatus`` | String    | voip status (\"Up\" if online)  |\r\n|``callState`` | CallState    | voip callstate (IDLE,INCALL,OFFHOOK,OUTCALL)  |\r\n|``message`` | int    | number of vocal message  |\r\n|``notanswered`` | int    | number of not answered call  |\r\n|``internetState`` | int    | -  |\r\n|``authenticated`` | int    | 0 if not authenticated / 1 if authenticated |\r\n|``displayState`` | boolean    | true if Bbox led is ON / false for OFF |\r\n\r\n<h3>Authentication</h3>\r\n\r\nTo request private api, you have to authenticate with your bbox management interface password :\r\n\r\n```\r\napi.authenticate(\"your_password\", new IAuthenticationListener() {\r\n\r\n\t@Override\r\n\tpublic void onAuthenticationSuccess(String token) {\r\n\t\t\r\n\t\t//successfull registration\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onAuthenticationError() {\r\n\t\t\r\n\t\t//failure registration\r\n\t}\r\n\t\r\n});\r\n```\r\n\r\nIf registration is successful, token is stored in RAM in Bboxapi object. Further call to BboxApi object will integrate a Cookie header with received token.\r\n\r\n<h3>Logout</h3>\r\n\r\nTo logout :\r\n```\r\napi.logout(new ILogoutListener() {\r\n\t\r\n\t@Override\r\n\tpublic void onLogoutSuccess() {\r\n\t\r\n\t\t//successfull logout\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onLogoutError() {\r\n\t\r\n\t\t//failure logout\r\n\t}\r\n});\r\n```\r\n<h3>Check authentication</h3>\r\n\r\n```\r\nboolean api.isAuthenticated()\r\n```\r\n\r\n<h3>Retrieve Bbox device info</h3>\r\n\r\nSome information about Bbox : \r\n\r\n```\r\napi.bboxDevice(new IBboxDeviceListener() {\r\n\r\n\t@Override\r\n\tpublic void onBboxDeviceReceived(BBoxDevice device) {\r\n\t\t\r\n\t\t//Bbox device request successfulll\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onBboxDeviceFailure() {\r\n\r\n\t\t//Bbox device request failure\r\n\t}\r\n\r\n});\r\n```\r\n\r\n``BBoxDevice`` object description \r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``status`` | int    | -      |\r\n|``bootNumber`` | int    | number of boot  |\r\n|``modelName`` | String    | Bbox model name  |\r\n|``userConfigured`` | boolean    | define if user has already logged before  |\r\n|``displayState`` | boolean    | true if Bbox led is ON / false for OFF |\r\n|``firstuseDate`` | String    | date of bbox first use |\r\n|``serialNumber`` | String    | bbox serial number |\r\n\r\n<h3>Retrieve known host list</h3>\r\n\r\nGet list of all host known by Bbox with firstseen and lastseen date\r\n\r\n```\r\napi.getHosts(new IHostsListener() {\r\n\t\t\t\t\t\r\n\t@Override\r\n\tpublic void onHostsReceived(List<Host> hostList) {\r\n\t\t\r\n\t\t//host request successfull\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onHostsFailure() {\r\n\t\t\r\n\t\t//host request failure\r\n\t\t\r\n\t}\r\n});\r\n```\r\n\r\nResult is a list of ``Host`` object define as following :\r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``id`` | int    | host id (begin from 1)      |\r\n|``hostname`` | String    | host name     |\r\n|``macaddress`` | String    | host mac address      |\r\n|``ipaddress`` | String    | host IP address      |\r\n|``type`` | String    | \"Static\" or \"STB\"      |\r\n|``link`` | String    | type of link for this host (Wifi 2.4 / Wifi 5 / Offline)    |\r\n|``devicetype`` | String    | \"Device\" or \"STB\"      |\r\n|``firstseen`` | String    | host was first seen on this date      |\r\n|``lastseen`` | String    | host was last seen on this date     |\r\n|``lease`` | int    | lease time for this host     |\r\n|``active`` | boolean    |  define if host is active |\r\n\r\n<h3>Retrieve wireless data</h3>\r\n\r\nGet information about wireless data\r\n\r\n```\r\napi.getWirelessData(new IWirelessListener() {\r\n\r\n\t@Override\r\n\tpublic void onWirelessDataReceived(WirelessData wirelessData) {\r\n\r\n\t\t//wireless data request successfull\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onWirelessDataFailure() {\r\n\r\n\t\t//wireless data request failure\r\n\r\n\t}\r\n});\r\n```\r\n\r\n``WirelessData`` object description \r\n\r\nThis structure features several map with channel number as key ( radio / ssid / capabilities and wifi type)\r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``status`` | String    | ? (\"Loaded\" static value)      |\r\n|``radioList`` | HashMap<Integer, RadioObject>    | list of radio information per channel (see below)   |\r\n|``ssidList`` | HashMap<Integer, SsidObject>    | list of ssid information per channel (see below)   |\r\n|``capabilityRadioList`` | HashMap<Integer, List<WirelessCapability>>    | list of wireless capabilities information per channel (see below)   |\r\n|``standardTypeList`` | HashMap<Integer, List<String>>    | list of wifi types per channel (ex : \"802.11a/n\")   |\r\n\r\nList object items :\r\n\r\n* ``RadioObject`` object description \r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``enable`` | boolean    | is radio enabled      |\r\n|``standard`` | String    | type of wifi (bgnac)      |\r\n|``state`` | int    | state ?     |\r\n|``channel`` | int    | channel used     |\r\n|``currentChannel`` | int    | current channel      |\r\n|``dfs`` | boolean    | using dynamic frequency selection      |\r\n|``ht40`` | boolean    | using 40MHz wide channel     |\r\n\r\n* ``SsidObject`` object description \r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``id`` | String    | ssid name     |\r\n|``enabled`` | boolean    | is ssid enabled     |\r\n|``hidden`` | boolean    | is ssid hidden     |\r\n|``bssid`` | String    | basic set of service address     |\r\n|``wmmenable`` | boolean    | is Wifi multimedia enabled     |\r\n|``wpsenabled`` | boolean    | is WPS security is enabled     |\r\n|``wpsstatus`` | String    | WPS status     |\r\n|``securityDefault`` | boolean    | security use by default for this ssid     |\r\n|``securityProtocol`` | String    | security protocol used (WPA / WPA2 ...)    |\r\n|``securityEncryption`` | String    | enryption used   |\r\n|``securityPassphrase`` | String    | wifi passphrase    |\r\n\r\n* ``WirelessCapability`` object description\r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``channel`` | int    | channel num     |\r\n|``ht40`` | String    | channel used (52 to 136 are only available if Dynamic Frequency Selection is enabled)     |\r\n|``nodfs`` | boolean    | no dynamic frequency selection used     |\r\n|``cactime`` | int    | channel availability check time     |\r\n|``cactime40`` | int    | channel availability check time for 40MHz wide band     |\r\n\r\n\r\n<b>to know if wireless is enabled, use  ``WirelessData.isRadioEnabled()``</b>\r\n\r\n<h3>Retrieve voip data</h3>\r\n\r\nGet voip information\r\n\r\n```\r\napi.voipData(new IVoipDataListener() {\r\n\r\n\t@Override\r\n\tpublic void onVoipDataReceived(Voip voipData) {\r\n\t\t\r\n\t\t//voip request successfull\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onVoipDataFailure() {\r\n\t\t\r\n\t\t//voip request failure\r\n\r\n\t}\r\n\t\r\n});\r\n```\r\n\r\nResult is a list of ``Voip`` object define as following :\r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``id`` | int    | -      |\r\n|``status`` | String    | voip status (\"Up\" if online)  |\r\n|``callState`` | CallState    | voip callstate (IDLE,INCALL,OFFHOOK,OUTCALL)  |\r\n|``uri`` | String    | SIP phone line |\r\n|``blockState`` | int    | number of blocked call (to verify) |\r\n|``anoncallState`` | int    | number of anonymous call |\r\n|``mwi`` | int    | number of message waiting |\r\n|``messageCount`` | int    | number of messages |\r\n|``notanswered`` | int    | number of call not answered |\r\n\r\n<h3>Retrieve list of call log</h3>\r\n\r\nGet full list of call log since last reboot\r\n\r\n```\r\napi.getFullCallLog(new IFullCallLogListener() {\r\n\r\n\t@Override\r\n\tpublic void onFullCallLogReceived(List<CallLog> callLogList) {\r\n\t\t\r\n\t\t//call log request successfull\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onFullCallLogFailure() {\r\n\t\t\r\n\t\t//call log request failure\r\n\t}\r\n\r\n});\r\n```\r\n\r\nResult is a list of ``CallLog`` object define as following :\r\n\r\n| property             | Type              | comment\r\n|--------------|--------------|------------------------|\r\n|``id`` | int    | call id      |\r\n|``number`` | String    | phone number     |\r\n|``date`` | long    | call date    |\r\n|``type`` | CallType    | call type (INCALL / OUTCALL)    |\r\n|``answered`` | boolean    | define if call was answered or not    |\r\n|``duration`` | int    | call duration (answered or not)  |\r\n\r\n<hr/>\r\n\r\n<h3>Dial a phone number - Trigger phone ring before call</h3>\r\n\r\nDial a specified phone number. Phone will ring and call will be processed once user hookoff\r\n\r\n```\r\napi.voipDial(1,\"0666666666\",new IRequestStatusListener() {\r\n\t\r\n\t@Override\r\n\tpublic void onSuccess() {\r\n\t\t\r\n\t\t//voip dial success\r\n\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onFailure() {\r\n\t\t\r\n\t\t//voip dial failure\r\n\r\n\t}\r\n});\r\n```\r\n\r\nInput  :\r\n\r\n* line number (int) : 1 or 2 according to the line on which you plugged your phone\r\n* phone number (String) : number to call\r\n* task completion listener (IRequestStatusListener) : retrieve asynchronous task completion or failure\r\n\r\n<h3>Set Bbox led state</h3>\r\n\r\n\r\nSwitch led display to ON / OFF on Bbox \r\n\r\n```\r\napi.setBboxDisplayState(true, new IRequestStatusListener() {\r\n\t\t\t\t\t\r\n\t@Override\r\n\tpublic void onSuccess() {\r\n\t\t//box display set success\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onFailure() {\r\n\t\t//box display set failure\r\n\t}\r\n});\r\n```\r\n\r\nInput : \r\n* display state (boolean) \r\n* task completion listener (IRequestStatusListener) :  retrieve asynchronous task completion or failure\r\n\r\n\r\n<h3>Set Wifi state</h3>\r\n\r\nSwitch Wifi to ON/OFF \r\n\r\n```\r\napi.setWifiState(true, new IRequestStatusListener() {\r\n\t\r\n\t@Override\r\n\tpublic void onSuccess() {\r\n\t\t//box wifi set status success\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void onFailure() {\r\n\t\t//box wifi set status failure\r\n\t}\r\n\r\n});\r\n```\r\n\r\nInput : \r\n* wifi state (boolean) \r\n* task completion listener (IRequestStatusListener) :  retrieve asynchronous task completion or failure\r\n\r\n<hr/>\r\n\r\n<h2>Android integration</h2>\r\n\r\nTo integrate with Android add Internet permission to manifest : \r\n```\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n\r\nTo include jar :\r\n```\r\nrepositories {\r\n    flatDir {\r\n        dirs 'libs'\r\n    }\r\n}\r\ndependencies {\r\n    compile fileTree(dir: 'libs', include: ['*.jar'])\r\n}\r\n```\r\n\r\n<h2>Testing Bbox APIs</h2>\r\n\r\n* You can test all previous API in java project bbox-api-client-test :\r\n\r\n```\r\ncd ./bbox-api-client-test/release\r\njava -jar bbox-api-client-test-1.02.jar\r\n```\r\n\r\n* You can test Bbox API with a Linux Bash script ``bboxapi-curl.sh`` script accomplishing authentication, request voip data and dial a number.\r\n\r\nUsage :\r\n```\r\n./bboxapi-curl.sh <your_password> <phone_number>\r\n```\r\n\r\n<hr/>\r\n\r\n<b>External JAVA Library</b>\r\n\r\n* json-simple  : http://code.google.com/p/json-simple/\r\n\r\n* clientsocket : https://github.com/akinaru/socket-multiplatform/tree/master/client/socket-client/java\r\n\r\n* http-endec   : https://github.com/akinaru/http-endec-java\r\n\r\n<b>TODO</b>\r\n\r\n* authentication session timeout\r\n* more APIs left to implement\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}